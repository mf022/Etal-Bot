///////////////////////////////////////////////////
//        characters in your game setting: 		 //		
///////////////////////////////////////////////////
var characterdiff        =  "99"; 	//use this to keep those pesky spam bots out of the f'ing game
									//note you must manually hit the check box the first time for this to work
var maxNumberOfPlayersss = "8";		//use this to set the maximum number of players allowed in your game

///////////////////////////////////////
//        Channel Settings: 		 //		/ /These controll what if any channel you join
///////////////////////////////////////
var joinChatAfterGame			= false;			 // join chat after leaving a game
var joinRandomChannel			= false;		 // if this is true, will join a random channel, otherwise it will use the channel below..
var joinChannelInChat			= "";		 // Channel you want your bot to join, leave blank to not join a private channel

///////////////////////////////////////
//        Message Settings: 		 //		// These controll what your bot sais to the leechers will also send a log incommand to a channel bot
///////////////////////////////////////
var chatMessageOnJoin			= "set a login command here";	// Chat Message to say Login command for channel bot will only be sent once
var chatMessageAfterGame1		= "configure me";	// Optional chat message Line #1 to say after each game on Channel
var chatMessageAfterGame2		= "in your ntbot.ntj file";		// Optional chat message Line #2 to say after each game on Channel
var chatMessageAfterGame3		= "in the scripts folder";		// Optional chat message Line #3 to say after each game on Channel
var chatMessageAfterGame4		= "these lines can be blank if you dont need them all";		// Optional chat message Line #4 to say after each game on Channel
var chatMessageAfterGame5		= "dont forget to set your channel as well";	// Optional chat message Line #5 to say after each game on Channel

///////////////////////////////////////		// These will let you send a message with a game name password and time to your leechers
//      Game Message Settings:       //		// var saygamename must be true for any of these to work
///////////////////////////////////////		// You cant NOT have a - in you game name it will bug it out
var saygamename 			= false;						// Must be true for any of the game message settings to work
var nextgamemessage			= "next game should be";	// This will come befor your next game name eg "New game is"
var saypassword 			= true;						// This will togle if the bot says your game pw
var saytime 				= true;						// This will togle if the bot says how much time till creation
var timemessage 			= "in about";				// This will come after your pw and befor the time eg. "in about" xx seconds say time MUST be true for this to be used

//////////////////////////////////////
//       Minimum Game Length:       //
//////////////////////////////////////

var gameMinLength		= 180000;	// time in milliseconds, minimum game length, 180 seconds default (1 game/3 minutes)

////////////////////////////////////////
//        Connection Settings:        //
////////////////////////////////////////

var unableToConnectRetry	= 5;		// time in minutes to retry connecting on connection fail (real value is +/- 1 min)
var realmDownRetry		= 300;		// time in minutes to retry connecting on a realm down (default is 300 minutes)
var disconnectedRetry		= 5;		// time in minutes to retry on a disconnection (usually ip ban related)
var cdkeyInUseRetry		= 5;		// time in minutes to retry on a cdkey in use error message (set to 0 to stop)
var connectingToBnetTimeout	= 20000;	// time in milliseconds to wait for a login to time out and click cancel and retry
var characterScreenTimeout	= 10000;	// time in milliseconds to wait for character screen to appear
var pleaseWaitTimeout		= 10000;	// time in milliseconds to wait for a please wait popup
var createGameThreshold		= 5000;		// time in milliseconds to wait between making games
var createGameThresholdRandom	= 1000;		// time in milliseconds to randomly add +/- to the game create time
var createGameTimeout		= 45000;	// time in milliseconds to register a failed to create game
var waitInLineTimeout		= 60000;	// time in milliseconds to wait in lines for a create game (60 second default)
var characterSelectDelay	= 1000;		// time in milliseconds to wait before selecting a character on the char screen
var loginDelay			= 1000;		// time in milliseconds to wait before submitting login information
var clickDelay			= 500;		// wait X milliseconds before next action after a click event
var textDelay			= 500;		// wait X milliseconds before next action after inserting text into a textbox
var clickDelayRandom		= 500;		// random amount of time to add to a click
var textDelayRandom		= 500;		// random amount of time to add to a text set
var gameDoesNotExistDelayMin	= 600000;	// how long to wait when a Game Does Not Exist occurs - minimum - default 10 minutes
var gameDoesNotExistDelayMax	= 900000;	// how long to wait when a Game Does Not Exist occurs - maximum - default 15 minutes
var gameDoesNotExistTimeout	= 30000;	// how long to wait for the dialog to disappear (default 30 seconds, don't change this)
var waitBeforeEnterChatMin	= 1000;		// min how long to wait before entering chat
var waitBeforeEnterChatMax	= 2000;		// max how long to wait before entering chat
var waitInChatBeforeActionsMin	= 2000;		// min how long to wait before joining channel
var waitInChatBeforeActionsMax	= 3000;		// max how long to wait before joining channel
var waitBeforeNextLineChatMin	= 500;		// Minimum ammount of time to add after each text line	
var waitBeforeNextLineChatMax	= 1500;		// Maximum ammount of time to add after each text line
var ftjDelay = 180;							// time to idle before trying if bot failed to join.  In seconds.

// DONT EDIT ANYTHING BELOW THIS

// D2NT Manager Command
const ETAL_MGR_LOADING = 1;
const ETAL_MGR_READY = 2;
const ETAL_MGR_LOGIN = 3;
const ETAL_MGR_CREATE_GAME = 4;
const ETAL_MGR_INGAME = 5;
const ETAL_MGR_RESTART = 6;
const ETAL_MGR_CHICKEN = 7;
const ETAL_MGR_PRINT_STATUS = 8;
const ETAL_MGR_COMMON_LOG = 9;
const ETAL_MGR_ITEM_LOG = 10;
const ETAL_MGR_ERROR_LOG = 11;


var alreadyLoggedIn = false; // will only send the login command once leave as unless you want to login everytime you join a channel
var lastGameMade = GetTickCount();
var lastGameStatus = 0;
var nextGameMake = 0;
var inGameAt = 0;
var chatActionsDone = false;
var lastGameFailed = false;
var tempDelay = Random(waitBeforeNextLineChatMin, waitBeforeNextLineChatMax);
var gameInfo = "";
var bugignor = true;
var ftjcount = 0;
var game = "";

Include("Common/CControlInfo.ntl");
Include("Common/Libs/CLColorConverter.ntl");
Include("Common/Libs/CLFile.ntl");
Include("Common/Libs/CLTracker.ntl");
Include("Common/Libs/CLManager.ntl");
Include("Common/Libs/CLDevTools.ntl");
var controlData = new controlInfo();

function NTMain()
{
	Delay(1000);

	var ingame = false;

	controlData.clickDelay = clickDelay;
	controlData.textDelay = textDelay;
	controlData.clickDelayRandom = clickDelayRandom;
	controlData.textDelayRandom = textDelayRandom;

	while (1) {
		if (me.ingame) {
			if (!inGameAt) {
				inGameAt = GetTickCount();
			}

			if (!ingame) {
				RunGC(); // run garbage collector between each game
				Load("Common/CScriptControl.ntj");
				ingame = true;

				if (me.playtype > 0) {
					CLManager.SendEvent(ETAL_MGR_INGAME, "In Game[IP:" + me.gameserverip.split(".")[3] + "]");
				} else {
					CLManager.SendEvent(ETAL_MGR_INGAME, "In Game");
				}
				lastGameStatus = 2; // in game successful

			}

		} else {
			if (ingame) {
				ingame = false;
				CLManager.SendEvent(555, "");// cd swap check performed by manager
			}

			locationAction(controlData.getLocation());
		}
		Delay(1000);
	}
}

function locationAction(locationId) {
	switch (locationId) {
	case 3: // Lobby Chat
		//ftjcheck
		if (ftjcount >= 10 && lastGameStatus === 1) {
			CLManager.SendEvent(ETAL_MGR_PRINT_LOG, COLOR_1 + "FTJ detected...........Idling");
			ftjcount = 0;
			inGameAt = 0;
			lastGameStatus = 0;
			setNextGameMake();
		}

		if (!chatActionsDone) {
			chatActionsDone = true;
			Delay(Random(waitInChatBeforeActionsMin, waitInChatBeforeActionsMax));

			if (joinRandomChannel || joinChannelInChat != "") {
				Delay(1000);
					if(!alreadyLoggedIn){
						alreadyLoggedIn = true;
					}
				Delay(500);
				chatActionsDone = true;
			}
		}
	case 1:	// Lobby
		//ftjcheck
		if (ftjcount >= 10 && lastGameStatus === 1) {
			CLManager.SendEvent(ETAL_MGR_PRINT_LOG, COLOR_1 + "FTJ detected...........Idling");
			ftjcount = 0;
			inGameAt = 0;
			lastGameStatus = 0;
			setNextGameMake();
		}

		if (locationId === 1 && joinChatAfterGame) {
			Delay(Random(waitBeforeEnterChatMin, waitBeforeEnterChatMax));
			controlData.click(controlData.controls.lobby.button.enterChat);
			break;
		}

		if (GetTickCount() > nextGameMake) {
			lastGameFailed = false;

			switch (lastGameStatus) {
			case 0:	
				password = (me.gamepassword);
				game = SetGameName(game, false);
				time = (parseInt((nextGameMake - GetTickCount() - tempDelay)/1000+3.0));
				
				_control = controlData.get(controlData.controls.lobby.button.create); // fixes creation stuck button bug out of unmodded d2nt
				if (_control && _control.pressed) {
					controlData.click(controlData.controls.lobby.button.join);
					Delay(500);
				}
				
				controlData.click(controlData.controls.lobby.button.create);
				_control = controlData.get(controlData.controls.lobby.create.button.useCharacterDifference);

				if (_control && !_control.pressed) {
					controlData.click(controlData.controls.lobby.create.button.useCharacterDifference);//checks the use character diff box...does this every time so no go
				}
				controlData.setText(controlData.controls.lobby.create.editBox.characterDifference,(characterdiff)); //level restriction
				controlData.setText(controlData.controls.lobby.create.editBox.maxNumberOfPlayers, (maxNumberOfPlayersss)); //max players
				nextGameMake = GetTickCount() + createGameTimeout; // set our timeout
				CLManager.SendEvent(ETAL_MGR_PRINT_STATUS, "Create Game");
				break;
			case 1: // game failed, rollover to reset timer
				inGameAt = GetTickCount(); // reset inGameAt, to wait how long we should have waited..
				lastGameFailed = true;
			case 2:
				lastGameStatus = 0;
				setNextGameMake();
				CLManager.SendEvent(ETAL_MGR_PRINT_STATUS, "Exited Game");
				break;
			}
		} else {
			timeoutDelay("Create next Game", nextGameMake-GetTickCount());
		}

		CLTracker.Create();
		break;

	case 2: // Waiting In Line
		if (GetTickCount()-lastGameMade > waitInLineTimeout) {
			controlData.click(controlData.controls.lobby.inLine.button.cancel);
		}
		break;

	case 4: // Create Game

		controlData.setText(controlData.controls.lobby.create.editBox.gameName, game);
		Delay (100);
		controlData.setText(controlData.controls.lobby.create.editBox.password, me.gamepassword);
		Delay (100);
		controlData.click(controlData.controls.lobby.create.button.createGame);
		locationTimeout(5000, "Game Create", locationId);
		lastGameMade = GetTickCount();
		lastGameStatus = 1; // pending creation
		break;

	case 5: // Join Game
		break;

	case 6: // Ladder
		break;

	case 7: // Channel List
		break;

    case 8: // Main Menu   
        if (controlData.getCurrentRealmIndex() !== me.gatewayid && me.playtype > 0) {
            SelectRealm();
            return;
        }
        controlData.click(controlData.gameTypes[me.playtype]);
        break;

    case 9: // Login

		if (me.playtype !== 0) {
			Delay(loginDelay);
			Login();
			locationTimeout(5000, "Log in", locationId);
		}
		
		if (me.playtype === 0) {
			controlData.click(controlData.controls.login.button.exit);
		}
        break;


	case 10: // Login Error (this is a fatal error, so stop)
		CLManager.SendEvent(ETAL_MGR_RESTART, "");
		Delay(3500);
		break;

	case 11: // Unable To Connect
		timeoutDelay("Unable to Connect", unableToConnectRetry*60*1000)
		controlData.click(controlData.controls.login.unableToConnect.button.ok);
		break;

	case 12: // Character Select
		var chars = [[137, 133], [409, 133], [137, 226], [409, 226], [137, 319], [409, 319], [137, 412], [409, 412]];

		if (me.playtype === 0) {
			controlData.click(controlData.controls.characterSelect.textBox.characterInfo[0], chars[0][0], chars[0][1], 1);
			controlData.click(controlData.controls.characterSelect.textBox.characterInfo[0], chars[0][0], chars[0][1], 1);
		} else {
			controlData.click(controlData.controls.characterSelect.textBox.characterInfo[me.charloc], chars[me.charloc][0], chars[me.charloc][1], 1);
			controlData.click(controlData.controls.characterSelect.textBox.characterInfo[me.charloc], chars[me.charloc][0], chars[me.charloc][1], 1);
		}
		break;

	case 13: // Realm Down - Character Select screen
		controlData.click(controlData.controls.characterSelect.button.exit);
		timeoutDelay("Realm Down", realmDownRetry*60*1000);
		break;

	case 14: // Character Select - Disconnected
		timeoutDelay("Disconnected", disconnectedRetry*60*1000);
		controlData.click(controlData.controls.characterSelect.disconnected.button.ok);
		break;

	case 15: // New Character
		break;	

	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(pleaseWaitTimeout, "Character Select" ,locationId)) {
			controlData.click(controlData.controls.characterSelect.pleaseWait.button.cancel);
		}
		break;

	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		controlData.click(controlData.controls.lobby.lostConnection.button.ok);
		break;

	case 18: // D2 Splash
		controlData.click(controlData.controls.d2Splash.textBox.copyright);
		break;

	case 19: // Login - Cdkey In Use
		timeoutDelay("CDKey in Use", cdkeyInUseRetry*60*1000);
		controlData.click(controlData.controls.login.cdkeyInUse.button.ok);
		break;

	case 20: // Single Player - Select Difficulty
		switch (me.diff) {
			case 0:
				controlData.click(controlData.controls.characterSelect.difficulty.button.normal);
				break;
			case 1:
				controlData.click(controlData.controls.characterSelect.difficulty.button.nightmare);
				break;
			case 2:
				controlData.click(controlData.controls.characterSelect.difficulty.button.hell);
				break;
		}
		break;

	case 21: // Main Menu - Connecting
		if (!locationTimeout(connectingToBnetTimeout, "Main Menu", locationId)) {
			controlData.click(controlData.controls.mainMenu.connecting.button.cancel);
		}
		break;

	case 22: // Login - Invalid Cdkey (classic or xpac)
		CLManager.SendEvent(ETAL_MGR_RESTART, locationId, 3600);
		Delay(3500);
		break;	

	case 23: // Character Select - Connecting
		if (!locationTimeout(characterScreenTimeout, "Character Select",locationId)) {
			controlData.click(controlData.controls.characterSelect.button.exit);
		}
		break;

	case 24: // Server Down - not much to do but wait..
		break;

	case 25: // Lobby - Please Wait
		if (!locationTimeout(pleaseWaitTimeout, "Lobby", locationId)) {
			controlData.click(controlData.controls.lobby.pleaseWait.button.cancel);
		}
		break;

	case 26: // Lobby - Game Name Exists
		CLManager.SendEvent(ETAL_MGR_PRINT_LOG, COLOR_1 + "Game already exists", 0);

		inGameAt = 0;
		lastGameStatus = 0;
		setNextGameMake();

		locationTimeout(15000, "Game Exists", locationId);
		break;

	case 27: // Gateway Select
		controlData.clickRealmEntry(me.gatewayid);
		controlData.click(controlData.controls.gateway.button.ok);
		break;

	case 28: // Lobby - Game Does Not Exist
		inGameAt = Random(gameDoesNotExistDelayMin, gameDoesNotExistDelayMax);
		lastGameStatus = 0;
		setNextGameMake();

		locationTimeout(gameDoesNotExistTimeout, "Game Doesn't Exist", locationId);
		break;
	default:
		if (lastGameStatus === 1) {
			CLManager.SendEvent(ETAL_MGR_PRINT_STATUS, "Please Wait...", 0);
			for (ftjcount = 0; ftjcount <= 10 && !me.ingame; ftjcount += 1) {
				Delay(1000)
			}
		}
		break;
	}
}

function setNextGameMake() {
	if (lastGameMade == 0) {
		lastGameMade = createGameThreshold + Random(0-createGameThresholdRandom, createGameThresholdRandom);
		nextGameMake = lastGameMade
		inGameAt = 0;
		return;
	}
	
	lastGameMade = inGameAt;	
	nextGameMake = lastGameMade + createGameThreshold + Random(0-createGameThresholdRandom, createGameThresholdRandom) + gameMinLength;
	inGameAt = 0;
	chatActionsDone = false;
}

function outputGameLength() {
	if (inGameAt) {
		duration = GetTickCount() - inGameAt;
		inGameAt = (duration < gameMinLength ? gameMinLength - duration : 0);
	}
}

function locationTimeout(time, text, locationId) {
	endtime = GetTickCount() + time;

	while (controlData.getLocation() == locationId && endtime > GetTickCount()) {
		CLManager.SendEvent(ETAL_MGR_PRINT_STATUS, text + " (" + parseInt((endtime-GetTickCount())/1000) + "s)");
		Delay(500);
	}

	return (controlData.getLocation() != locationId);
}

function timeoutDelay(text, time) {
	endtime = GetTickCount() + time;

	while (endtime > GetTickCount()) {
		CLManager.SendEvent(ETAL_MGR_PRINT_STATUS, text + " (" + parseInt((endtime-GetTickCount())/1000) + "s)");
		Delay(1000);
	}
}

function getRandomString(_length) {
	_retString = "";
	_charSet = "0123456789abcdefghijlmnopqrstuvwxyz";

	while (_length--) {
		_retString += _charSet.charAt(Random(0, _charSet.length-1));
		Delay(1);
	}

	return _retString;
}

function getGameName(lastGameString) {
	if (!lastGameString) {
		lastGameString = me.gamename;
	}

    return (lastGameString.split("-")[0] + "-");
}

function SetGameName(lastGameString, simple) {
	var myCount, gamename;

	if (!lastGameString) {
		lastGameString = me.gamename;
	}

	gamename = lastGameString.split("-")[0];
	myCount = parseInt(lastGameString.split("-")[1]) + 1;


	if (myCount <= 9) {
		return (gamename + '-0' + myCount);
	}

	return gamename + "-" + myCount;
}
