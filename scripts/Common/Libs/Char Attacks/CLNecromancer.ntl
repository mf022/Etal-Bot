var Skeletons = [];
var Mages = [];
var Revives = [];

var CLToon = {
	DetectAttackPattern: function () {
		return this.AttackPatternInt();
	},

	Attack: function (target, firstorder) {
		return this.AttackInt(target, firstorder);
	},

	AttackPatternInt: function () {
		return false;
	},

	AttackInt: function (target, firstorder) {
		var pos, primaryindex;

		//if ((CLTMGR_CheckCurse(CLConfig.CheckSelfSafe, CLConfig.CheckMercSafe, true)) || (me.hp <= parseInt(me.hpmax * CLConfig.TPChicken,10) / 100)) {
			//if (!CLTMGR_VisitTown()) { return 0; }
		//}
		//_merc = CLC_GetMerc();
		//if(_merc){
			//if ((CLTMGR_CheckCurse(CLConfig.CheckSelfSafe, CLConfig.CheckMercSafe, true)) || (_merc.hp <= parseInt(_merc.hpmax * CLConfig.MercTPChicken,10) / 100)) {
				//if (!CLTMGR_VisitTown()) { return 0; }
			//}
		//}

		//Check if we have needed arrows or bolts
		if(Ranged){
			CLAttack.HaveArrows();
		}

		//if (CLT_CheckMerc()) { // merc revive
			//CLTMGR_VisitTown();
		//}
		
		if (!me.GetState(14)) { //check and recast bone armor
			CLSkill.Cast(68, NTC_HAND_RIGHT);
		}

		if (firstorder && CLConfig.AttackSkill[0] > -1 && CLAttack.GetResistance(target, SkillDamage[0]) < 100 && me.GetSkillStatus(CLConfig.AttackSkill[0]) !== 8) {
			if (GetDistance(me.x, me.y, target.x, target.y) > SkillRange[0] || !CheckCollision(me, target, 4))	{
				pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, SkillRange[0], 4);

				if (pos) {
					CLMove.To(target.areaid, pos[0], pos[1], 0);
				}
			}

			if (!CLSkill.Cast(CLConfig.AttackSkill[0], NTC_HAND_RIGHT, target.x, target.y)) {
				return 2;
			}

			return 3;
		}
		
		if (CLConfig.Curse[0] > 0 && target.spectype & 0x0A && !target.GetState(CurseState[0]) && this.IsCursable(target)) {
			if (GetDistance(me.x, me.y, target.x, target.y) > 25 || !CheckCollision(me, target, 4)) {
				pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, 25, 4);

				if (pos) {
					CLMove.To(target.areaid, pos[0], pos[1], 0);
				}
			}

			if (!CLSkill.Cast(CLConfig.Curse[0], NTC_HAND_RIGHT, target.x, target.y)) {
				return 2;
			}

			return 3;
		} else if (CLConfig.Curse[1] > 0 && !(target.spectype&0x0A) && !target.GetState(CurseState[1]) && this.IsCursable(target)) {
			if (GetDistance(me.x, me.y, target.x, target.y) > 25 || !CheckCollision(me, target, 4))	{
				pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, 25, 4);

				if (pos) {
					CLMove.To(target.areaid, pos[0], pos[1], 0);
				}
			}

			if (!CLSkill.Cast(CLConfig.Curse[1], NTC_HAND_RIGHT, target.x, target.y)) {
				return 2;
			}

			return 3;
		}

		primaryindex = (target.spectype & 0x0A) ? 1 : 3;
		
		if (CLAttack.GetResistance(target, SkillDamage[primaryindex]) < 100) {
			if (CLConfig.TeleStomp && primaryindex === 1) {
				CLMove.To(target.areaid, target.x, target.y);
			}
		
			if (!this.CastSkillInt(primaryindex, target)) {
				return 2;
			}

			if (CLConfig.ActiveSummon) {
				if (this.SkeletonArmy(CLConfig.SkeletonArmy)) {
					if (this.MageArmy(CLConfig.MageArmy)) {
						if (this.ReviveArmy(CLConfig.ReviveArmy)) {
							this.ExplodeCorpses(target);
						}
					}
				}
			} else {
				this.ExplodeCorpses(target);
			}
			
			return 3;
		}
		
		if (CLConfig.AttackSkill[5] > -1 && CLAttack.GetResistance(target, SkillDamage[5]) < 100) {
			if (!this.CastSkillInt(5, target)) {
				return 2;
			}
			
			if (CLConfig.ActiveSummon) {
				if (this.SkeletonArmy(CLConfig.SkeletonArmy)) {
					if (this.MageArmy(CLConfig.MageArmy)) {
						if (this.ReviveArmy(CLConfig.ReviveArmy)) {
							this.ExplodeCorpses(target);
						}
					}
				}
			} else {
				this.ExplodeCorpses(target);
			}
			
			return 3;
		}

		if (CLConfig.TeleStomp && CLCommon.GetMerc() && CLAttack.GetResistance(target, CLA_DAMAGE_PHYSICAL) < 100) {
			CLMove.GetCloserInt(target);
			
			if (target.mode === 12) {
				return 2;
			}
			
			Delay(300);

			if (CLConfig.ActiveSummon) {
				if (this.SkeletonArmy(CLConfig.SkeletonArmy)) {
					if (this.MageArmy(CLConfig.MageArmy)) {
						if (this.ReviveArmy(CLConfig.ReviveArmy)) {
							this.ExplodeCorpses(target);
						}
					}
				}
			} else {
				this.ExplodeCorpses(target);
			}

			return 3;
		}
		
		return 1;
	},

	CastSkillInt: function (index, target) {
		var i, pos;

		if (CLConfig.AttackSkill[index] === 92) {
			if (!NovaTick || GetTickCount() > NovaTick + CLConfig.PoisonNovaDelay) {
				if (GetDistance(me.x, me.y, target.x, target.y) > 5 || !CheckCollision(me, target, 4))	{
					pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, NTC_HAND_RIGHT, 4); 

					if (pos) {
						CLMove.To(target.areaid, pos[0], pos[1]);
					}
				}
				
				NovaTick = GetTickCount();
				
				return CLSkill.Cast(CLConfig.AttackSkill[index], NTC_HAND_LEFT, target);
			}
		} else if (me.GetSkillStatus(CLConfig.AttackSkill[index]) !== 8) {
			if (GetDistance(me.x, me.y, target.x, target.y) > 15 || !CheckCollision(me, target, 4))	{
				pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, SkillRange[index], 4); 

				if (pos) {
					CLMove.To(target.areaid, pos[0], pos[1]);
				}
			}

			return CLSkill.Cast(CLConfig.AttackSkill[index], NTC_HAND_LEFT, target.x, target.y);
		}

		if (CLConfig.AttackSkill[index + 1] > -1) {
			if (GetDistance(me.x, me.y, target.x, target.y) > 15 || !CheckCollision(me, target, 4)) {
				pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, SkillRange[index + 1], 4);

				if (pos) {
					CLMove.To(target.areaid, pos[0], pos[1], 0);
				}
			}

			return CLSkill.Cast(CLConfig.AttackSkill[index + 1], NTC_HAND_LEFT, target.x, target.y);
		}

		for (i = 0; i < 25; i+= 1) {
			Delay(NTC_DELAY_FRAME);

			if (me.GetSkillStatus(CLConfig.AttackSkill[index]) !== 8 && (GetTickCount() > NovaTick + CLConfig.PoisonNovaDelay || !NovaTick)) {
				break;
			}
		}

		return false;
	},

	IsCursable: function (target) {
		if (target.name.indexOf(GetLocaleString(11086)) !== -1) { // Possessed
			return false;
		}

		switch (target.classid) {
			case 206: // Foul Crow Nest
			case 258: // Water Watcher
			case 261: // Water Watcher
			case 266: // Flavie
				return false;
		}
		
		return true;
	},

	SkeletonArmy: function (num) {
		var i, corpse;

		if (num <= 0) {
			return true;
		}

		if (this.GetMinionCount(0) >= num) {
			return true;
		}
		
		for (i = 0; i < 5; i += 1) {
			corpse = GetUnit(NTC_UNIT_MONSTER);
			
			if (corpse) {
				do {
					Print(corpse.name);
					if (this.IsValidCorpse(corpse)) {
						Print("Valid corpse: " + corpse.name);
						if (this.GetMinionCount(0) >= num) {
							return true;
						}

						if (GetDistance(me.x, me.y, corpse.x, corpse.y) > 15 || !CheckCollision(me, corpse, 4)) {
							CLSkill.Cast(70, NTC_HAND_RIGHT, corpse.x, corpse.y);
						}
					}
				} while (corpse.GetNext());
			} else {
				break;
			}
		}

		return false;
	},

	MageArmy: function (num) {
		var i, corpse;

		if (num <= 0) {
			return true;
		}

		if (this.GetMinionCount(1) >= num) {
			return true;
		}

		for (i = 0; i < 5; i += 1) {
			corpse = GetUnit(NTC_UNIT_MONSTER);

			if (corpse) {
				do {
					if (this.IsValidCorpse(corpse)) {
						Print("Valid corpse: " + corpse.name);
						if (this.GetMinionCount(1) >= num) {
							return true;
						}	

						if (GetDistance(me.x, me.y, corpse.x, corpse.y) > 15 || !CheckCollision(me, corpse, 4)) {
							CLSkill.Cast(80, NTC_HAND_RIGHT, corpse.x, corpse.y);
						}
					}
				} while (corpse.GetNext());
			} else {
				break;
			}
		}

		return false;
	},

	ReviveArmy: function (num) {
		var i, corpse;

		if (num <= 0) {
			return true;
		}

		if (this.GetMinionCount(2) >= num) {
			return true;
		}

		for (i = 0; i < 5; i += 1) {
			corpse = GetUnit(NTC_UNIT_MONSTER);

			if (corpse) {
				do {
					if (this.IsValidCorpse(corpse, true)) {
						if (this.GetMinionCount(2) >= num) {
							return true;
						}

						if (GetDistance(me.x, me.y, corpse.x, corpse.y) > 15 || !CheckCollision(me, corpse, 4)) {
							CLSkill.Cast(95, NTC_HAND_RIGHT, corpse.x, corpse.y);
						}
					}
				} while (corpse.GetNext());
			} else {
				break;
			}
		}

		return false;
	},

	ExplodeCorpses: function (target) {
		var exploded = 0,
			corpse = GetUnit(NTC_UNIT_MONSTER);

		if (CLConfig.ExplodeCorpses === 0 || target.hp === 0 || target.mode === 0 || target.mode === 12) {
			return false;
		}

		if (corpse) {
			do {
				if (GetDistance(corpse, target) <= 10 && this.IsValidCorpse(corpse) && !CheckCollision(me, target, 4)) {
					if (CLSkill.Cast(74, NTC_HAND_RIGHT, corpse.x, corpse.y)) {
						exploded += 1;
					}

					if (exploded >= 2) {
						return false;
					}
				}
			} while (corpse.GetNext());
		}

		return true;
	},

	IsValidCorpse: function (unit, revive) {
		var badList = [462, 571];

		if (revive === undefined) {
			revive = false;
		}

		if ((revive && unit.spectype & 0x0A) || badList.indexOf(unit.classid) !== -1) {
			return false;
		}
		
		if ((unit.mode === 0 || unit.mode === 12)) {
			if (GetDistance(me.x, me.y, unit.x, unit.y) <= 20 && !CheckCollision(me, unit, 4)) {
				if (!unit.GetState(1) && // freeze
					!unit.GetState(105) &&
					!unit.GetState(96) && // revive
					!unit.GetState(99) && // redeemed
					!unit.GetState(104) && // nodraw
					!unit.GetState(107) && // shatter
					!unit.GetState(118) && // noselect
					GetBaseStat("monstats2.txt", unit.classid, revive ? 97 : 95)) { // non selectable and non revivable monsters

					if (Revives.indexOf(unit.gid) === -1 && Mages.indexOf(unit.gid) === -1 && Skeletons.indexOf(unit.gid) === -1) {
						return true;
					}
				}
			}
		}
		
		return false;
	},

	GetMinionCount: function (type) { // 0 - skeleton, 1 - mage, 2 - revive
		var minion, ret;

		Skeletons = []; // resets all arrays
		Mages = []; // resets all arrays
		Revives = []; // resets all arrays

		switch (type) {
			case 0:
				minion = GetUnit(NTC_UNIT_MONSTER, 363);
				break;
			case 1:
				minion = GetUnit(NTC_UNIT_MONSTER, 364);
				break;
			case 2:
				minion = GetUnit(NTC_UNIT_MONSTER);
				break;
		}
		
		if (minion) {
			do {
				if (CLCommon.CheckOwner(minion) && minion.hp > 0) {
					if (type === 2) {
						if (minion.GetState(96)) {
							Revives.push(minion.gid);
						}
					} else {
						switch (type) {
							case 0:
								Skeletons.push(minion.gid);
								break;
							case 1:
								Mages.push(minion.gid);
								break;
						}
					}
				}
			} while (minion.GetNext());
		}

		switch (type) {
			case 0:
				return (Skeletons.length + 1);
			case 1:
				return (Mages.length + 1);
			case 2:
				return (Revives.length + 1);
		}

		return null;
	}
};