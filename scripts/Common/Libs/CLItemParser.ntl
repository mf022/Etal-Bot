Include("Common/Libs/CLItemAlias.ntl");
var _NTIP_CheckList = [];

var CLItemParser = {
	OpenFile: function (filepath) {
		var i, nipfile, line, originalLine, item, items, thisItem, tempCheckList,
			lineNumber = 0,
			errorCaught = false;

		items = me.GetItems();

		if (items) {
			for (i = 0; i < items.length; i += 1) {
				thisItem = items[i];
				item = thisItem;
			}
		} else {
			Print (COLOR_1 + "Fatal Error!  Character stash/inventory/body is all completely empty!");
			Delay(20000);
			return false;
		}

		nipfile = FileOpen(filepath, 0);

		if (!nipfile) {
			return false;
		}

		while (!nipfile.eof) {
			tempCheckList = [];
			lineNumber += 1;
			originalLine = nipfile.ReadLine();
			line = this.ParseLineInt(originalLine);

			if (line) {
				tempCheckList.push(line);
				
				try {
					if (tempCheckList[0][0].length > 0) {
						eval(tempCheckList[0][0]);
					}

					if (tempCheckList[0][1].length > 0) {
						eval(tempCheckList[0][1]);
					}

					if (tempCheckList[0][2].length > 0) {
						eval(tempCheckList[0][2]);
					}
				}

				catch (err) {
					Print (COLOR_1 + "Error in NIP, line ignored: " + filepath + ", line: " + lineNumber);
					errorCaught = true;
					line = "";
				}
			}

			if (line && line !== "") {
				line.push(filepath);
				line.push(lineNumber);
				_NTIP_CheckList.push(line);
			}
		}

		nipfile.Close();

		if (errorCaught) {
			Print (COLOR_1 + "Please use the numpad + key to run the NipChecker!");
		}
		return true;
	},

	CheckItem: function (item) {
		var i,
			identified = item.itemflag & 0x10,
			resultArray = [];

		resultArray[0] = 0;

		try {
			for (i = 0; i < _NTIP_CheckList.length; i += 1) {
				resultArray[1] = _NTIP_CheckList[i][3];
				resultArray[2] = _NTIP_CheckList[i][4];

				if (_NTIP_CheckList[i][0].length > 0) {
					if (eval(_NTIP_CheckList[i][0])) {
						if (_NTIP_CheckList[i][1].length > 0) {
							if (eval(_NTIP_CheckList[i][1])) {
								return (this.CheckQuantity(item,i,resultArray));
							} else if(!identified && resultArray[0] === 0) {
								resultArray[0] = -1;
								return resultArray;
							}
						} else {
							return (this.CheckQuantity(item,i,resultArray));
						}
					}
				} else if(_NTIP_CheckList[i][1].length > 0) {
					if(eval(_NTIP_CheckList[i][1])) {
						return (this.CheckQuantity(item,i,resultArray));
					} else if(!identified && resultArray[0] === 0) {
						resultArray[0] = -1;
						return resultArray;
					}
				}
			}
		} catch(err) {
			resultArray[0] = 0;
			CLManager.SendError("CLItemParser.CheckItem: Bad NIP detected: " + _NTIP_CheckList[i][0] + "#" + _NTIP_CheckList[i][1] + "#" + _NTIP_CheckList[i][2] + ": " + _NTIP_CheckList[i][3] + ", " + _NTIP_CheckList[i][4]);
			CLManager.SendError("    Error: " + err);
		}
		return resultArray;
	},

	CheckQuantity: function (item,i,resultArray) {
		var phrase0, phrase1;

		resultArray[0] = 0;

		if (_NTIP_CheckList[i][2] && _NTIP_CheckList[i][2]["MaxQuantity"] && !isNaN(_NTIP_CheckList[i][2]["MaxQuantity"])) {
			phrase0 = _NTIP_CheckList[i][0];
			phrase1 = _NTIP_CheckList[i][1];

			if (_NTIP_CheckList[i][0].length <= 0) {
				phrase0 = null;
			}

			if (_NTIP_CheckList[i][1].length <= 0) {
				phrase1 = null;
			}

			if (this.CheckQuantityOwned(phrase0, phrase1, false) < _NTIP_CheckList[i][2]["MaxQuantity"]) {
				resultArray[0] = 1;
			} else {
				resultArray[0] = 0;
			}
		} else {
			resultArray[0] = 1;
		}
		return resultArray;	
	},

	// Internal function
	CheckQuantityOwned: function (item_type, item_stats, check_inventory_too) {
		var i,
			nb = 0,
			items = me.GetItems();

		if (!items) {
			return 0;
		}

		for (i = 0; i < items.length; i += 1) {
			if (items[i].mode === 0 && items[i].itemloc === 4) {
				item = items[i];

				if ((item_type !== null && item_type.length > 0 && eval(item_type)) || item_type === null) {
					if ((item_stats !== null && item_stats.length > 0 && eval(item_stats)) || item_stats === null) {
						nb += 1;
					}
				}
			} else if (check_inventory_too && items[i].mode === 0 && items[i].itemloc === 0) {
				item = items[i];

				if ((item_type !== null && item_type.length > 0 && eval(item_type)) || item_type === null) {
					if ((item_stats !== null && item_stats.length > 0 && eval(item_stats)) || item_stats === null) {
						if (CLConfig.Columns[items[i].y][items[i].x] > 0) { // we check only space that is supposed to be free
							nb += 1;
						}
					}
				}
			}
		}
		return nb;
	},

	ParseLineInt: function (input) {
		var i, start, end, section, keyword, result, quantity, string;

		end = input.indexOf("//");

		if (end !== -1) {
			input = input.substring(0, end);
		}

		input = input.replace(/\s+|;/g, "").toLowerCase();

		if (input.length < 5) {
			return null;
		}

		result = input.split("#");

		if (result[0] && result[0].length > 4) {
			section = result[0].split("[");
			result[0] = section[0];

			for (i = 1; i < section.length; i += 1) {
				end = section[i].indexOf("]") + 1;

				switch (section[i][0]) {
					case 't':
						result[0] += "item.itemtype";
						break;
					case 'n':
						result[0] += "item.classid";
						break;
					case 'c':
						result[0] += "item.itemclass";
						break;
					case 'q':
						result[0] += "item.quality";
						break;
					case 'f':
						if(section[i][end] === '!') {
							result[0] += "!(item.itemflag&";
						} else {
							result[0] += "(item.itemflag&";
						}
						end += 2;
						break;
					case 'l':
						result[0] += "item.itemlevel";
						break;
					case 'p':
						result[0] += "item.itemprefix";
						break;
					case 's':
						result[0] += "item.itemsuffix";
						break;
					default:
						Print("Unknown Keyword : " + input);
						break;
				}

				for (start = end ; end < section[i].length ; end += 1) {
					if(!this.IsSyntaxInt(section[i][end])) {
						break;
					}
				}

				result[0] += section[i].substring(start, end);

				for (start = end; end < section[i].length; end += 1) {
					if (this.IsSyntaxInt(section[i][end])) {
						break;
					}
				}

				keyword = section[i].substring(start, end);

				if (isNaN(keyword)) {
					switch (section[i][0]) {
						case 't':
							result[0] += _NTIPAliasType[keyword];
							break;
						case 'n':
							result[0] += _NTIPAliasClassID[keyword];
							break;
						case 'c':
							result[0] += _NTIPAliasClass[keyword];
							break;
						case 'q':
							result[0] += _NTIPAliasQuality[keyword];
							break;
						case 'f':
							result[0] += _NTIPAliasFlag[keyword] + ")";
							break;
					}
				} else {
					if (section[i][0] === 'f') {
						result[0] += keyword + ")";
					} else {
						result[0] += keyword;
					}
				}

				result[0] += section[i].substring(end);
			}
		} else {
			result[0] = "";
		}

		if (result[1] && result[1].length > 4) {
			section = result[1].split("[");
			result[1] = section[0];

			for (i = 1 ; i < section.length ; i += 1) {
				end = section[i].indexOf("]");
				keyword = section[i].substring(0, end);

				if (keyword.toLowerCase() === "description") {
					string = section[i].split("\"")[1];
					result[1] += "item.itemloc == 0 &&";
					result[1] += "item.itemdesc.replace(/ |;|\t/g, \"\").toLowerCase().indexOf(\"" + string + "\") > -1";
					result[1] += section[i].split("\"")[2];
				} else {			
					if (isNaN(keyword)) {
						result[1] += "item.GetStat(" + _NTIPAliasStat[keyword] + ")";
					} else {
						result[1] += "item.GetStat(" + keyword + ")";
					}

					result[1] += section[i].substring(end + 1);
				}
			}
		} else {
			result[1] = "";
		}

		if (result[2] && result[2].replace(/^\s+|\s+$/, "").length > 0) {
			section = result[2].split("[");
			result[2] = [];
			for (i = 1; i < section.length; i += 1) {
				end = section[i].indexOf("]");
				keyword = section[i].substring(0, end);
				if (keyword.toLowerCase().replace(/^\s+|\s+$/, "") === "maxquantity") {
					end = section[i].split("==")[1].replace(/^\s+|\s+$/, "").indexOf("//");
					if (end === -1) {
						end = section[i].split("==")[1].replace(/^\s+|\s+$/, "").length;
					}

					quantity = parseInt(section[i].split("==")[1].replace(/^\s+|\s+$/, "").substring(0, end));
					result[2]["MaxQuantity"] = quantity;
				} else {
					Print("Error in your NIP file : unknown 3rd part keyword.");
				}
			}
		} else {
			result[2] = "";
		}

		return result;
	},

	IsSyntaxInt: function (ch) {
		return (ch === '!' || ch === '%' || ch === '&' || (ch >= '(' && ch <= '+') || ch === '-' || ch === '/' || (ch >= ':' && ch <= '?') || ch === '|');
	},

	CheckNipSyntax: function (line, f) {
		var regexp, i, j, k, openp, closep, phrase,
			keyword, partialEq, leftEq, rightEq, keys, regexp2,
			subphrase = [];

		// if the line is too short, it must be broken
		if (line && line.length < 5) {
			this.CheckNipSyntaxDisplay(line, f, "Line is too short to contain a valid entry");
			return false;
		}

		// split the line into property, stat and quantity phrases
		regexp = /#/;
		phrase = line.split(regexp);

		if (phrase[3]) {
			this.CheckNipSyntaxDisplay(line, f, "Too many phrases in the line");
			return false;
		}

		for (i = 0; i <= 2; i += 1) {
			// make sure a phrase exists before we parse anything
			if (phrase[i]) {
				// if the phrase exists but is too short to be anything, bail out
				if (phrase[i].length < 5) {
					this.CheckNipSyntaxDisplay(line,f, "Phrase " + i + " is too short to contain a valid entry");
					return false;
				}

				// strip out matching sets of regular parens
				regexp = /.*\(.+\).*/;

				while (phrase[i].match(regexp)) {
					openp = phrase[i].indexOf("(");
					phrase[i] = phrase[i].substring(0,openp) + phrase[i].substring(openp + 1,phrase[i].length);
					closep = phrase[i].indexOf(")");
					phrase[i] = phrase[i].substring(0,closep) + phrase[i].substring(closep+1,phrase[i].length);
				}

				// if any parens remain they are mismatched
				regexp = /^.*[\(\)].*$/;

				if (phrase[i].match(regexp)) {
					this.CheckNipSyntaxDisplay(line, f, "Mismatched parens");
					return false;
				}

				// check for trailing && and ||
				regexp = /(\&\&|\|\|)$/;

				if (phrase[i].match(regexp)) {
					this.CheckNipSyntaxDisplay(line, f, "Trailing conjunction at end of phrase");
					return false;
				}

				// check for leading && and ||
				regexp = /^(\&\&|\|\|)/;

				if (phrase[i].match(regexp)) {
					this.CheckNipSyntaxDisplay(line, f, "Leading conjunction at end of phrase");
					return false;
				}

				// split into subphrases based on && and ||
				regexp = /\&\&|\|\|/;
				subphrase[i] = phrase[i].split(regexp);

				for (j = 0; subphrase[i][j]; j += 1) {
					// split equations into left and right sides while removing the comparitive
					regexp = /\=\=|!=|<=|>=|<|>/;
					partialEq = subphrase[i][j].split(regexp);
					leftEq = "";
					rightEq = "";

					if (partialEq[0] && partialEq[0].length > 0) {
						leftEq = partialEq[0];
					} else {
						this.CheckNipSyntaxDisplay(line, f, "Invalid Equation");
						return false;
					}

					if (partialEq[1] && partialEq[1].length > 0) {
						rightEq = partialEq[1];
					} else {
						this.CheckNipSyntaxDisplay(line, f, "Invalid Equation");
						return false;
					}

					// if any comparitives remain they are mismatched
					regexp = /[=<>]+/;

					if ((leftEq.match(regexp)) || (rightEq.match(regexp))) {
						this.CheckNipSyntaxDisplay(line, f, "Invalid Comparitive");
						return false;
					}

					// there can only be a left and right side to any equation
					if (partialEq[2]) {
						this.CheckNipSyntaxDisplay(line, f, "Malformed equation");
						return false;
					}

					// unless enclosed in ""
					// allow word characters (letters and digits), apostrophes and decimals separated but valid arithmatic operators on the right
					regexp = /^[\w\.\-\']+([\+,\-,\*,\/][\w|\.\-\']+)*$/;
					regexp2 = /^\"(.)*\"$/;

					if (!rightEq.match(regexp) && !rightEq.match(regexp2)) {
						this.CheckNipSyntaxDisplay(line, f, "right side equation syntax error");
						return false;
					}

					// on the left split based on arithmatic operator		  
					regexp = /[\+\-\*\/\%]+/;
					keys = leftEq.split(regexp);

					for (k = 0; keys[k]; k += 1) {
						// on the left allow numbers with decimals and keywords only
						regexp = /^[\d\.]+$/;
						regexp2 = /^\[[a-z0-9]+\]$/;

						if (!keys[k].match(regexp) && !keys[k].match(regexp2)) {
							this.CheckNipSyntaxDisplay(line, f, "invalid left side equation entry");
							return false;
						}

						// if the entry was a keyword and not a number, validate the keyword against the list
						if (keys[k].match(regexp2)) {
							keyword = keys[k].substring(1,keys[k].length-1);

							if (!this.CheckKeyword(keyword,i)) {
								this.CheckNipSyntaxDisplay(line,f, "invalid keyword *" + keyword + "* in segment " + i);
								return false;
							}
						}
					}
				}

				// check for &&&&, ||||, ||&&, &&||
				if (j < subphrase[i].length) {
					this.CheckNipSyntaxDisplay(line, f, "Invalid Conjunction");
					return false;
				}
			}
		}
		return true;
	},

	CheckKeyword: function (keyword, i) {
		var k,
			isMember = false,
			keywordList = [],
			numeric = false,
			defined = false;

		keywordList[0] = ["name","quality","flag","type","level","prefix","suffix","class"];
		keywordList[1] = ["description"];
		keywordList[2] = ["maxquantity"];

		for (k = 0; k < keywordList[i].length; k += 1) {
			if (keyword === keywordList[i][k]) {
				isMember = true;
			}
		}

		// check stat keywords
		if (i === 1) {
			// bypass the check if they are already numeric
			if (keyword.match(/^\d+$/)) {
				numeric = true;
			}

			if (_NTIPAliasStat[keyword] || _NTIPAliasStat[keyword] === 0) {
				defined = true;
			}

			if (defined || numeric) {
				isMember = true;
			}
		}
		return isMember;
	},

	CheckNipSyntaxDisplay: function (line, f, err) {
		var screenDisplay = false;

		if (!f) {
			screenDisplay = true;
		}

		if (screenDisplay) {
			Print (COLOR_3 +"NIP Error detected: Use the numpad '+' key to run the NIP check utility.");
		} else {
			f.WriteLine("NIP Error: " + err);
			f.WriteLine("    " + line);
			f.WriteLine("");
		}
	}
};