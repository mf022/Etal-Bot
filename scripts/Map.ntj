/* ///////////////////////////////////////////////////
//        characters in your game setting: 		 //		
///////////////////////////////////////////////////
var characterdiff        =  "99"; 	//use this to keep those pesky spam bots out of the f'ing game
									//note you must manually hit the check box the first time for this to work
var maxNumberOfPlayersss = "8";		//use this to set the maximum number of players allowed in your game

///////////////////////////////////////
//        Channel Settings: 		 //		/ /These controll what if any channel you join
///////////////////////////////////////
var joinChatAfterGame			= false;			 // join chat after leaving a game
var joinRandomChannel			= false;		 // if this is true, will join a random channel, otherwise it will use the channel below..
var joinChannelInChat			= "set a channel";		 // Channel you want your bot to join, leave blank to not join a private channel

///////////////////////////////////////
//        Message Settings: 		 //		// These controll what your bot sais to the leechers will also send a log incommand to a channel bot
///////////////////////////////////////
var chatMessageOnJoin			= "set a login command here";	// Chat Message to say Login command for channel bot will only be sent once
var chatMessageAfterGame1		= "configure me";	// Optional chat message Line #1 to say after each game on Channel
var chatMessageAfterGame2		= "in your ntbot.ntj file";		// Optional chat message Line #2 to say after each game on Channel
var chatMessageAfterGame3		= "in the scripts folder";		// Optional chat message Line #3 to say after each game on Channel
var chatMessageAfterGame4		= "these lines can be blank if you dont need them all";		// Optional chat message Line #4 to say after each game on Channel
var chatMessageAfterGame5		= "dont forget to set your channel as well";	// Optional chat message Line #5 to say after each game on Channel

///////////////////////////////////////		// These will let you send a message with a game name password and time to your leechers
//      Game Message Settings:       //		// var saygamename must be true for any of these to work
///////////////////////////////////////		// You cant NOT have a - in you game name it will bug it out
var saygamename 			= false;						// Must be true for any of the game message settings to work
var nextgamemessage			= "next game should be";	// This will come befor your next game name eg "New game is"
var saypassword 			= true;						// This will togle if the bot says your game pw
var saytime 				= true;						// This will togle if the bot says how much time till creation
var timemessage 			= "in about";				// This will come after your pw and befor the time eg. "in about" xx seconds say time MUST be true for this to be used

//////////////////////////////////////
//       Minimum Game Length:       //
//////////////////////////////////////

var gameMinLength		= 180000;	// time in milliseconds, minimum game length, 180 seconds default (1 game/3 minutes)

////////////////////////////////////////
//        Connection Settings:        //
////////////////////////////////////////

var unableToConnectRetry	= 5;		// time in minutes to retry connecting on connection fail (real value is +/- 1 min)
var realmDownRetry		= 300;		// time in minutes to retry connecting on a realm down (default is 300 minutes)
var disconnectedRetry		= 5;		// time in minutes to retry on a disconnection (usually ip ban related)
var cdkeyInUseRetry		= 5;		// time in minutes to retry on a cdkey in use error message (set to 0 to stop)
var connectingToBnetTimeout	= 20000;	// time in milliseconds to wait for a login to time out and click cancel and retry
var characterScreenTimeout	= 10000;	// time in milliseconds to wait for character screen to appear
var pleaseWaitTimeout		= 10000;	// time in milliseconds to wait for a please wait popup
var createGameThreshold		= 5000;		// time in milliseconds to wait between making games
var createGameThresholdRandom	= 1000;		// time in milliseconds to randomly add +/- to the game create time
var createGameTimeout		= 45000;	// time in milliseconds to register a failed to create game
var waitInLineTimeout		= 60000;	// time in milliseconds to wait in lines for a create game (60 second default)
var characterSelectDelay	= 1000;		// time in milliseconds to wait before selecting a character on the char screen
var loginDelay			= 1000;		// time in milliseconds to wait before submitting login information
var clickDelay			= 500;		// wait X milliseconds before next action after a click event
var textDelay			= 500;		// wait X milliseconds before next action after inserting text into a textbox
var clickDelayRandom		= 500;		// random amount of time to add to a click
var textDelayRandom		= 500;		// random amount of time to add to a text set
var gameDoesNotExistDelayMin	= 600000;	// how long to wait when a Game Does Not Exist occurs - minimum - default 10 minutes
var gameDoesNotExistDelayMax	= 900000;	// how long to wait when a Game Does Not Exist occurs - maximum - default 15 minutes
var gameDoesNotExistTimeout	= 30000;	// how long to wait for the dialog to disappear (default 30 seconds, don't change this)
var waitBeforeEnterChatMin	= 1000;		// min how long to wait before entering chat
var waitBeforeEnterChatMax	= 2000;		// max how long to wait before entering chat
var waitInChatBeforeActionsMin	= 2000;		// min how long to wait before joining channel
var waitInChatBeforeActionsMax	= 3000;		// max how long to wait before joining channel
var waitBeforeNextLineChatMin	= 500;		// Minimum ammount of time to add after each text line	
var waitBeforeNextLineChatMax	= 1500;		// Maximum ammount of time to add after each text line
var ftjDelay = 180;							// time to idle before trying if bot failed to join.  In seconds.
 */
// DONT EDIT ANYTHING BELOW THIS

// D2NT Manager Command
const ETAL_MGR_LOADING = 1;
const ETAL_MGR_READY = 2;
const ETAL_MGR_LOGIN = 3;
const ETAL_MGR_CREATE_GAME = 4;
const ETAL_MGR_INGAME = 5;
const ETAL_MGR_RESTART = 6;
const ETAL_MGR_CHICKEN = 7;
const ETAL_MGR_PRINT_STATUS = 8;
const ETAL_MGR_PRINT_LOG = 9;
const ETAL_MGR_ITEM_LOG = 10;
const ETAL_MGR_ERROR_LOG = 11;

var inGameAt = 0;
var lastGameStatus = 0;

Include("Common/CControlInfo.ntl");
Include("Common/Libs/CColorConverter.ntl");
var controlData = new controlInfo();

function NTMain()
{
	Delay(1000);

	var _ingame = false;


	while(1)
	{
		if(me.ingame)
		{
			if(!inGameAt)
				inGameAt = GetTickCount();

			if(!_ingame)
			{
					
				_ingame = true;

				if(me.playtype > 0)
					sendEventToOOG(ETAL_MGR_INGAME, "In Game[IP:" + me.gameserverip.split(".")[3] + "]", 0);
				//else
					//sendEventToOOG(ETAL_MGR_INGAME, "In Game", 0);

				lastGameStatus = 2; // in game successful
				
				Load("NTMap/NTMapGame.ntj");
			}
			sendEventToOOG(ETAL_MGR_PRINT_STATUS, "In Game" + " (" + parseInt((GetTickCount()-inGameAt)/1000)+ " s)");
			Delay(1000);
		}
		else
		{
			if(_ingame)
			{
				_ingame = false;

				sendEventToOOG(D2NT_MGR_READY, "");
			}

			//locationAction(controlData.getLocation());

			Delay(500);
		}
	}
}

function locationAction(locationId)
{
	switch(locationId)
	{
	case 3: // Lobby Chat

	case 1:	// Lobby
		break;

	case 2: // Waiting In Line
		break;

	case 4: // Create Game
		break;

	case 5: // Join Game
		break;

	case 6: // Ladder
		break;

	case 7: // Channel List
		break;

	case 8: // Main Menu	
		break;

	case 9: // Login
		break;

	case 10: // Login Error (this is a fatal error, so stop)
		break;

	case 11: // Unable To Connect
		break;

	case 12: // Character Select
		break;

	case 13: // Realm Down - Character Select screen
		break;

	case 14: // Character Select - Disconnected
		break;

	case 15: // New Character
		break;	

	case 16: // Character Select - Please Wait popup
		break;

	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		break;

	case 18: // D2 Splash
		break;

	case 19: // Login - Cdkey In Use
		break;

	case 20: // Single Player - Select Difficulty
		break;

	case 21: // Main Menu - Connecting
		break;

	case 22: // Login - Invalid Cdkey (classic or xpac)
		break;	

	case 23: // Character Select - Connecting
		break;

	case 24: // Server Down - not much to do but wait..
		break;

	case 25: // Lobby - Please Wait
		break;

	case 26: // Lobby - Game Name Exists
		break;

	case 27: // Gateway Select
		break;

	case 28: // Lobby - Game Does Not Exist
		break;
	default:
		break;
	}
}

function sendEventToOOG(msgtype, statusString)
{
	return SendCopyData("Etal Manager", msgtype, statusString);
}